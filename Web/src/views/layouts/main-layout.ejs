<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script>
      function formatDateTime(isoString) {
        const date = new Date(isoString);

        // Extract hours, minutes, and seconds with padding
        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");
        const seconds = String(date.getSeconds()).padStart(2, "0");

        // Extract day, month, and year with padding for day and month
        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are 0-indexed
        const year = date.getFullYear();

        // Format the date and time into the desired output format
        return `${hours}:${minutes}:${seconds} - ${day}/${month}/${year}`;
      }

      const socket = io();
      socket.on("dht_data", (data) => {
        document.getElementById(
          "temperature"
        ).textContent = `${data.temperature}Â°C`;
        document.getElementById("humidity").textContent = `${data.humidity}%`;
      });

      socket.on("activity", (data) => {
        console.log("Received MQTT Data:", data);
        const container = document.getElementById("activity-container");

        // Create a new item
        const newItem = document.createElement("div");
        newItem.className =
          "block max-w-sm p-6 bg-gray-600 rounded-lg shadow hover:bg-[#007bff]";

        // Add content to the new item
        newItem.innerHTML = `
          <h5 class="mb-2 text-xl font-bold tracking-tight text-gray-900 dark:text-white">
            ${data.activity}
          </h5>
          <p class="font-normal text-sm text-gray-300">
            At: ${formatDateTime(data.date)}
          </p>
        `; // Adjust based on the structure of your data

        // Prepend the new item
        container.prepend(newItem);

        // Check if the container has more than 10 items
        if (container.children.length > 5) {
          container.removeChild(container.lastElementChild);
        }
      });
    </script>
  </head>
  <body>
    <header
      class="flex shadow-md py-4 px-4 sm:px-10 bg-gray-800 font-[sans-serif] min-h-[70px] tracking-wide relative z-50"
    >
      <div class="flex flex-wrap items-center justify-between gap-5 w-full">
        <h1
          class="font-extrabold font-sans text-4xl text-gray-200 hover:text-white cursor-pointer"
        >
          Dashboard
        </h1>

        <% if (!authenticated) { %>
        <div class="flex max-lg:ml-auto space-x-4">
          <button
            class="px-4 py-2 text-sm rounded-full font-bold text-gray-500 border-2 bg-gray-50 hover:text-gray-50 hover:bg-transparent transition-all ease-in-out duration-300"
            onclick="window.location.href='users/login'"
          >
            Login
          </button>
          <button
            class="px-4 py-2 text-sm rounded-full font-bold text-white border-2 border-[#007bff] bg-[#007bff] transition-all ease-in-out duration-300 hover:bg-transparent hover:text-[#007bff]"
            onclick="window.location.href='users/signup'"
          >
            Sign up
          </button>

          <button id="toggleOpen" class="lg:hidden">
            <svg
              class="w-7 h-7"
              fill="#000"
              viewBox="0 0 20 20"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fill-rule="evenodd"
                d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                clip-rule="evenodd"
              ></path>
            </svg>
          </button>
        </div>
        <% } else { %>
        <div class="flex max-lg:ml-auto space-x-4">
          <button
            class="px-4 py-2 text-sm rounded-full font-bold text-gray-500 border-2 bg-gray-50 hover:text-gray-50 hover:bg-transparent transition-all ease-in-out duration-300"
            onclick="window.location.href='users/logout'"
          >
            Log out
          </button>
        </div>
        <% } %>
      </div>
    </header>
    <%- include(body) %>
    <script>
      const options = {
        chart: {
          height: "100%",
          maxWidth: "100%",
          type: "line",
          fontFamily: "Inter, sans-serif",
          dropShadow: {
            enabled: false,
          },
          toolbar: {
            show: false,
          },
        },
        tooltip: {
          enabled: true,
          x: {
            show: false,
          },
        },
        dataLabels: {
          enabled: false,
        },
        stroke: {
          width: 6,
        },
        grid: {
          show: true,
          strokeDashArray: 4,
          padding: {
            left: 2,
            right: 2,
            top: -26,
          },
        },
        series: [
          {
            name: "Temperature",
            data: <%- JSON.stringify(chartData.temperature) %>,
            color: "#1A56DB",
          },
          {
            name: "Humidity",
            data: <%- JSON.stringify(chartData.humidity) %>,
            color: "#7E3AF2",
          },
        ],
        legend: {
          show: false,
        },
        stroke: {
          curve: "smooth",
        },
        xaxis: {
          categories: <%- JSON.stringify(chartData.labels) %>,
          labels: {
            show: true,
            style: {
              fontFamily: "Inter, sans-serif",
              cssClass: "text-xs font-normal fill-gray-500 dark:fill-gray-400",
            },
          },
          axisBorder: {
            show: false,
          },
          axisTicks: {
            show: false,
          },
        },
        yaxis: {
          show: false,
        },
      };

      if (
        document.getElementById("line-chart") &&
        typeof ApexCharts !== "undefined"
      ) {
        const chart = new ApexCharts(
          document.getElementById("line-chart"),
          options
        );
        chart.render();
      }
    </script>
    <script>
      function toggleMistingFan() {
        socket.emit("toggle_misting_fan");
      }

      function updateSliderValue(slider) {
        const value = slider.value;

        const sliderValueElement = document.getElementById("sliderValue");
        const sliderWidth = slider.offsetWidth;
        const thumbOffset = (value - slider.min) / (slider.max - slider.min);

        // Calculate the position of the value above the slider thumb
        const offset = thumbOffset * sliderWidth;
        sliderValueElement.style.left = `${offset}px`;

        // Update the displayed value
        sliderValueElement.textContent = value;
        socket.emit("change_led_value", { led_val: value });
      }

      document.addEventListener("DOMContentLoaded", () => {
        const slider = document.getElementById("led_value");
        updateSliderValue(slider);
      });

      function toggleNightLight(toggle) {
        const value = toggle.checked;
        socket.emit("toggle_auto_led", { auto_led: value });
      }
    </script>
  </body>
</html>
